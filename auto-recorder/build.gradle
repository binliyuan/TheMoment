plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
}

def canPublish = rootProject.ext.properties.containsKey("publish_script_path")
if (canPublish) {
    def publishFile = rootProject.file(rootProject.ext.publish_script_path)
    if (publishFile.exists()) {
        apply from: publishFile
    }
}

android {
    namespace 'com.volcengine.effectone.auto.recorder'
    compileSdk rootProject.ext.compileSdk

    defaultConfig {
        vectorDrawables.useSupportLibrary = true
        minSdk rootProject.ext.minSdk
        targetSdk rootProject.ext.targetSdk
        consumerProguardFiles "consumer-rules.pro"
        versionCode eoVersionCode()
        versionName eoVersionName()
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility rootProject.ext.java_version
        targetCompatibility rootProject.ext.java_version
    }

    kotlinOptions {
        jvmTarget = rootProject.ext.kotlin_jvmTarget
    }
}

dependencies {
    api project(":auto-common")
    //拍摄
    api "com.volcengine.effectone:recorder-ui:${EO_SDK_VERSION}"
    api "com.volcengine.effectone:recorder-sdk:${EO_SDK_VERSION}"
    //相册
    implementation project(':auto-album')

    //后续引入SPI把这下面这几个依赖干掉
    //高光SDK
    implementation project(":auto-moment")
    implementation "com.volcengine.ck.highlight:ck-highlight:${EO_SDK_VERSION}"
    //剪同款
    implementation rootProject.ext.libs["CK-CutSameIF"]
    implementation project(":auto-templates")

}

def eoVersionCode() {
    if (project.hasProperty("VERSION_CODE")) {
        return Integer.parseInt(VERSION_CODE)
    } else {
        "100000"
    }
}

def eoVersionName() {
    if (project.hasProperty("VERSION_NAME")) {
        return VERSION_NAME
    } else {
        "NO_VERSION_NAME"
    }
}